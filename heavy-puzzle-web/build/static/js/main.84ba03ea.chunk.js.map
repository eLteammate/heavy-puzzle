{"version":3,"sources":["store/puzzleSlice.ts","store/store.ts","logic/socket.ts","components/PuzzlePiece.tsx","components/PuzzleBlock.tsx","components/DragHandler.tsx","components/Canvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","pieces","undefined","puzzleSlice","createSlice","name","reducers","set","state","action","payload","selectPuzzle","puzzle","puzzleSliceReducer","reducer","store","configureStore","useAppSelector","useSelector","socket","io","process","console","log","on","data","blocks","dispatch","actions","lastRequest","setInterval","emit","type","PuzzlePiece","url","piece","selected","motion","image","animate","x","y","transition","duration","imageRendering","strokeWidth","stroke","href","imageUrl","width","height","useDragBlock","block","groupRef","useRef","scale","useContext","CanvasCoordinatesContext","useGesture","onDrag","e","blockId","id","offset","onDragEnd","target","drag","from","centerX","centerY","transform","dx","dy","bounds","top","bottom","left","right","PuzzleBlock","g","ref","style","touchAction","sort","p1","p2","map","DragHandler","color","initial","opacity","draggingUsers","length","Fragment","line","x1","y1","x2","y2","z","circle","r","cx","cy","fill","weight","clamp","min","max","canvasUnscaledSize","limitTransition","container","rect","getBoundingClientRect","trueScale","Math","size","offsetX","offsetY","React","createContext","Canvas","canvasHandlerElement","useState","setTransition","limited","delta","current","onPinch","pinch","scaleBounds","useEffect","Provider","value","overflow","h","svg","viewBox","toFixed","App","showTutorial","setShowTutorial","MotionConfig","ease","in","unmountOnExit","pos","w","bg","m","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84ba03ea.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {PuzzleBlockObject} from \"../logic/objects\";\nimport {RootState} from \"./store\";\n\n\ninterface PuzzleState {\n    pieces?: PuzzleBlockObject[];\n}\n\n\nconst initialState: PuzzleState = {\n    pieces: undefined,\n};\n\nexport const puzzleSlice = createSlice({\n    name: 'puzzle',\n    initialState,\n    reducers: {\n        set: (state, action: PayloadAction<PuzzleBlockObject[]>) => {\n            state.pieces = action.payload;\n        },\n    },\n});\n\nexport const selectPuzzle = (state: RootState) => state.puzzle.pieces;\n\nexport const puzzleSliceReducer = puzzleSlice.reducer;","import {configureStore} from '@reduxjs/toolkit';\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {puzzleSliceReducer} from \"./puzzleSlice\";\n\n\nexport const store = configureStore({\n    reducer: {\n        puzzle: puzzleSliceReducer,\n    },\n});\n\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {io} from \"socket.io-client\";\nimport {PuzzleBlockObject} from \"./objects\";\nimport {store} from \"../store/store\";\nimport {puzzleSlice} from \"../store/puzzleSlice\";\n\n\nconst socket = io(process.env.REACT_APP_API_URL as string);\nconsole.log(process.env.REACT_APP_API_URL);\n\n\nsocket.on(\"connect\", () => {\n    console.log(\"connected\");\n});\n\n\nsocket.on(\"state\", data => {\n    console.log(data);\n    const blocks = data.blocks as PuzzleBlockObject[];\n    store.dispatch(puzzleSlice.actions.set(blocks));\n});\n\n\nexport function getStatic(url: string) {\n    return process.env.REACT_APP_API_URL as string + url;\n}\n\n\ninterface LastRequest {\n    type: string;\n    data: object;\n}\n\n\nlet lastRequest: LastRequest | undefined = undefined;\n\n\nexport function dragBlock(blockId: number, x: number, y: number) {\n    lastRequest = {\n        type: \"drag\",\n        data: {\n            blockId: blockId,\n            x: x,\n            y: y,\n        },\n    };\n}\n\n\nexport function releaseBlock() {\n    lastRequest = {\n        type: \"release\",\n        data: {},\n    };\n}\n\n\nsetInterval(() => {\n    if (lastRequest) {\n        socket.emit(lastRequest.type, lastRequest.data);\n        lastRequest = undefined;\n    }\n}, 50);\n","import {PuzzlePieceObject} from \"../logic/objects\";\nimport {getStatic} from \"../logic/socket\";\nimport {motion} from \"framer-motion\";\n\n\ninterface PuzzlePieceProps {\n    piece: PuzzlePieceObject;\n    selected: boolean;\n}\n\n\nexport default function PuzzlePiece({piece, selected}: PuzzlePieceProps) {\n    return (\n        <motion.image\n            animate={{\n                x: piece.x,\n                y: piece.y,\n            }}\n            transition={{duration: 0.5}}\n            imageRendering=\"optimizeSpeed\"\n            strokeWidth={selected ? 3 : 0}\n            stroke={\"black\"}\n            href={getStatic(piece.imageUrl)}\n            width={piece.width * 1.03}\n            height={piece.height * 1.03}\n        />\n    );\n}\n","import {useGesture} from \"@use-gesture/react\";\nimport React, {useContext, useRef} from \"react\";\nimport {PuzzleBlockObject} from \"../logic/objects\";\nimport PuzzlePiece from \"./PuzzlePiece\";\nimport {motion} from \"framer-motion\";\nimport {dragBlock, releaseBlock} from \"../logic/socket\";\nimport {CanvasCoordinatesContext} from \"./Canvas\";\n\n\ninterface PuzzleBlockProps {\n    block: PuzzleBlockObject;\n}\n\n\nexport function useDragBlock(block: PuzzleBlockObject) {\n    const groupRef = useRef<SVGGElement>(null);\n    const scale = useContext(CanvasCoordinatesContext);\n\n    useGesture({\n        onDrag: e => dragBlock(block.id, e.offset[0], e.offset[1]),\n        onDragEnd: () => releaseBlock(),\n    }, {\n        target: groupRef,\n        drag: {\n            from: () => [block.centerX, block.centerY],\n            transform: ([dx, dy]) => [dx / scale, dy / scale],\n            bounds: {top: 50, bottom: 950, left: 50, right: 950},\n        },\n    });\n\n    return groupRef;\n}\n\n\nexport default function PuzzleBlock({block}: PuzzleBlockProps) {\n    const groupRef = useDragBlock(block);\n\n    return (\n        <motion.g ref={groupRef} style={{touchAction: \"none\"}}>\n            {[...block.pieces].sort(\n                (p1, p2) => (p1.id - p2.id)\n            ).map(piece =>\n                <PuzzlePiece\n                    selected={true}\n                    piece={piece}\n                    key={piece.id}\n                />)}\n        </motion.g>\n    );\n}\n","import {PuzzleBlockObject} from \"../logic/objects\";\nimport {motion} from \"framer-motion\";\nimport React from \"react\";\nimport {useDragBlock} from \"./PuzzleBlock\";\n\n\ninterface DragHandlerProps {\n    block: PuzzleBlockObject;\n}\n\n\nexport default function DragHandler({block}: DragHandlerProps) {\n    const groupRef = useDragBlock(block);\n\n    const color = `hsl(${(block.id * 1337) % 360} 100% 50%)`;\n\n    return (\n        <motion.g\n            initial={{opacity: 0}}\n            animate={{opacity: block.draggingUsers.length > 0 ? 1 : 0}}\n            transition={{duration: 0.15}}\n            key={block.id}\n            ref={groupRef}\n        >\n            {\n                block.draggingUsers.map(drag => <React.Fragment key={drag.id}>\n                    <motion.line\n                        x1={block.centerX} y1={block.centerY}\n                        initial={{x2: drag.x, y2: drag.y}}\n                        animate={{x2: drag.x, y2: drag.y}}\n                        transition={{duration: 0.5}}\n                        stroke={color}\n                        strokeWidth={5}\n                        key={`l${drag.id}`}\n                        z={10}\n                    />\n                    <motion.circle\n                        initial={{r: \"0.1cm\", cx: drag.x, cy: drag.y}}\n                        animate={{r: \"0.3cm\", cx: drag.x, cy: drag.y}}\n                        transition={{duration: 0.5}}\n                        fill={color}\n                        key={`c${drag.id}`}\n                    />\n                </React.Fragment>)\n            }\n            <motion.circle\n                initial={{r: \"0.1cm\"}}\n                animate={{r: block.draggingUsers.length > 0 ? \"0.4cm\" : \"0.1cm\"}}\n                transition={{duration: 0.5}}\n\n                cx={block.centerX}\n                cy={block.centerY}\n                stroke={color} strokeWidth={6}\n                fill=\"white\"\n                key={block.id + 1000}\n            />\n            <motion.circle\n                initial={{r: \"0.1cm\"}}\n                animate={{r: `${0.33 * block.draggingUsers.length / block.weight}cm`}}\n                transition={{duration: 0.5}}\n\n                cx={block.centerX}\n                cy={block.centerY}\n                fill={color}\n                key={-block.id}\n            />\n        </motion.g>\n    );\n}\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {Center} from \"@chakra-ui/react\";\nimport {useGesture} from \"@use-gesture/react\";\nimport {useAppSelector} from \"../store/store\";\nimport {selectPuzzle} from \"../store/puzzleSlice\";\nimport PuzzleBlock from \"./PuzzleBlock\";\nimport {motion} from \"framer-motion\";\nimport DragHandler from \"./DragHandler\";\n\n\nconst clamp = (x: any, min: any, max: any) => {\n    if (x < min) {\n        return min;\n    } else if (x > max) {\n        return max;\n    } else {\n        return x;\n    }\n};\n\nconst canvasUnscaledSize = 1000;\n\n\ninterface CanvasTransition {\n    offsetX: number;\n    offsetY: number;\n    scale: number;\n    trueScale?: number;\n    width: number;\n    height: number;\n}\n\n\nconst limitTransition = (transition: CanvasTransition, container: HTMLDivElement): CanvasTransition => {\n    const rect = container.getBoundingClientRect();\n\n    const scale = transition.scale;\n    const trueScale = Math.max(rect.width, rect.height) / canvasUnscaledSize * scale;\n    const size = canvasUnscaledSize / scale;\n\n    let width, height;\n    if (rect.width > rect.height) {\n        width = size;\n        height = width / rect.width * rect.height;\n    } else {\n        height = size;\n        width = height / rect.height * rect.width;\n    }\n\n    const trueX = clamp(transition.offsetX, 0, canvasUnscaledSize - width);\n    const trueY = clamp(transition.offsetY, 0, canvasUnscaledSize - height);\n\n    return {\n        offsetX: trueX,\n        offsetY: trueY,\n        scale: scale,\n        trueScale: trueScale,\n        width: width,\n        height: height,\n    };\n};\n\n\nexport const CanvasCoordinatesContext = React.createContext(1);\n\n\nexport default function Canvas() {\n    const puzzle = useAppSelector(selectPuzzle);\n\n    const container = useRef<HTMLDivElement>(null);\n    const canvasHandlerElement = useRef<SVGRectElement>(null);\n\n    const [transition, setTransition] = useState<CanvasTransition>({\n        offsetX: 0,\n        offsetY: 0,\n        scale: 1,\n        width: canvasUnscaledSize,\n        height: canvasUnscaledSize,\n        trueScale: undefined,\n    });\n\n    useGesture({\n        onDrag: (e) => {\n            const limited = limitTransition(\n                {\n                    ...transition,\n                    offsetX: transition.offsetX - e.delta[0] / (transition.trueScale || 1),\n                    offsetY: transition.offsetY - e.delta[1] / (transition.trueScale || 1),\n                },\n                container.current!!,\n            );\n            setTransition(limited);\n        },\n        // onDragStart: () => dispatch(userSlice.actions.setMovesPuzzle(\"canvas\")),\n        // onDragEnd: () => dispatch(userSlice.actions.setMovesPuzzle(undefined)),\n        onPinch: (e) => {\n            setTransition(limitTransition(\n                {\n                    ...transition,\n                    scale: e.offset[0],\n                },\n                container.current!!,\n            ));\n        },\n    }, {\n        target: canvasHandlerElement,\n        pinch: {\n            scaleBounds: [1, 5],\n        },\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => setTransition(limitTransition(transition, container.current!!)), []);\n\n    return (\n        <CanvasCoordinatesContext.Provider value={transition.trueScale || 1}>\n            <Center overflow=\"hidden\" h=\"100vh\" ref={container}>\n                <motion.svg\n                    animate={{\n                        viewBox: `\n                        ${transition.offsetX.toFixed(2)} \n                        ${transition.offsetY.toFixed(2)} \n                        ${transition.width} ${transition.height}\n                        `,\n                    }}\n                    style={{touchAction: \"none\"}}\n                >\n                    <rect\n                        ref={canvasHandlerElement}\n                        width={1000} height={1000} fill=\"white\"\n                        style={{touchAction: \"none\"}}\n                    />\n                    {[...(puzzle || [])].sort(\n                        (p1, p2) => (p2.weight - p1.weight)\n                    ).map(block => <PuzzleBlock\n                        block={block}\n                        key={block.id}\n                    />)}\n                    {puzzle?.map(block => (\n                        <DragHandler block={block} key={block.id}/>\n                    ))}\n                </motion.svg>\n            </Center>\n        </CanvasCoordinatesContext.Provider>\n    );\n}\n","import React, {useState} from 'react';\nimport {Box, Button, Center, ChakraProvider, Fade, ListItem, UnorderedList} from \"@chakra-ui/react\";\nimport Canvas from \"./components/Canvas\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {MotionConfig} from \"framer-motion\";\n\n\nfunction App() {\n    const [showTutorial, setShowTutorial] = useState(true);\n\n    return (\n        <Provider store={store}>\n            <MotionConfig transition={{\n                ease: \"linear\",\n            }}>\n                <ChakraProvider>\n                    <Canvas/>\n                    <Fade in={showTutorial} unmountOnExit>\n                        <Center\n                            pos=\"fixed\" top=\"0\" left=\"0\"\n                            w=\"100vw\" h=\"100vh\" bg=\"#ddd\"\n                        >\n                            <Box m={2}>\n                                <UnorderedList>\n                                    <ListItem>Перетягивайте детали пазла друг к другу</ListItem>\n                                    <ListItem>Когда правильные кусочки рядом - они объединятся</ListItem>\n                                    <ListItem>Чем больше кусочек, тем сложнее его тащить</ListItem>\n                                    <ListItem>Объединяйтесь с друзьями, чтобы собрать весь пазл!</ListItem>\n                                </UnorderedList>\n                                <Button onClick={() => setShowTutorial(false)}>\n                                    Вперед!\n                                </Button>\n                            </Box>\n                        </Center>\n                    </Fade>\n                </ChakraProvider>\n            </MotionConfig>\n        </Provider>\n    );\n}\n\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}